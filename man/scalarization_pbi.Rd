% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scalarization_pbi.R
\name{scalarization_pbi}
\alias{scalarization_pbi}
\title{Penalty-based Boundary Intersection Scalarization}
\usage{
scalarization_pbi(Y, W, minP, aggfun, eps = 1e-16, ...)
}
\arguments{
\item{Y}{matrix of objective function values}

\item{W}{matrix of weights.}

\item{minP}{numeric vector containing estimated ideal point}

\item{aggfun}{list containing parameters for the aggregation function. Must
contain the non-negative numeric constant \code{aggfun$theta}.}

\item{eps}{tolerance value for avoiding divisions by zero.}

\item{...}{other parameters (included for compatibility with generic call)}
}
\value{
Vector of scalarized performance values.
}
\description{
Perform PBI Scalarization for the MOEADr package.
}
\details{
This routine calculates the scalarized performance values for the MOEA/D
using the PBI method.
}
\section{References}{

Q. Zhang and H. Li, "MOEA/D: A Multiobjective Evolutionary Algorithm
Based on Decomposition", IEEE Trans. Evol. Comp. 11(6): 712-731, 2007.\cr

H. Li, Q. Zhang, "Multiobjective Optimization Problems With Complicated
Pareto Sets, MOEA/D and NSGA-II", IEEE. Trans. Evol. Comp. 12(2):284-302,
2009.\cr

F. Campelo, L.S. Batista, C. Aranha (2020): The {MOEADr} Package: A
Component-Based Framework for Multiobjective Evolutionary Algorithms Based on
Decomposition. Journal of Statistical Software \doi{10.18637/jss.v092.i06}\cr
}

\examples{
W      <- generate_weights(decomp = list(name = "sld", H = 19), m = 2)
Y      <- matrix(runif(40), ncol = 2)
minP   <- apply(Y, 2, min)
aggfun <- aggfun    <- list(name = "pbi", theta = 5)
Z      <- scalarization_pbi(Y, W, minP, aggfun)

}
